<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 命名空间,指定这个mapper(对应接口的全限定类名) -->
<!-- id,对应接口的方法名 -->
<mapper namespace="com.study.mybatis9.IStudentDao">

	<!-- 
		注意:
		在mapper的动态SQL中若出现大于号(>),小于号(<),大于等于号(>=),小于等于号(<=)等符号,
		最好将其转换为实体符号.否则,xml可能会解析出现问题,
		特别是对于小于号,在xml中是绝对不能出现的.否则,一定出错.
		
		原符号	替换符号
		<		&it;
		<=		&it;=
		>		&gt;
		>=		&gt;=
		&		&amp;
		'		&apos;
		"		&quot;
	 -->

	<select id="selectStusByIf" resultType="Student">
		select * from student where
		<!-- 这里的&&一定要替换成and不然会报错 -->
		<if test="name != null and name != ''">
			name like '%' #{name} '%'
		</if>
		<if test="age > 0">
			and age=#{age}
		</if>
		<if test="score > 0 ">
			and score>#{score}
		</if>
	</select>
	
	<select id="selectStusByWhere" resultType="Student">
		select * from student
		<!-- where标签会自动去掉无效的and,但不会自动加上and,所有一般都是全部写上and -->
		<where>
			<!-- 这里的&&一定要替换成and不然会报错 -->
			<if test="name != null and name != ''">
				and name like '%' #{name} '%'
			</if>
			<if test="age > 0">
				and age=#{age}
			</if>
			<if test="score > 0 ">
				and score>#{score}
			</if>
		</where>
	</select>
	
	<select id="selectStusByChoose" resultType="Student">
		select * from student
		<where>
			<!-- 类似于switch语句,满足哪一个就执行哪一个语句,不会发生穿透 -->
			<choose>
				<when test="name != null and name != ''">
					and name like '%' #{name} '%'
				</when>
				<when test="age > 0">
					and age=#{age}
				</when>
				<when test="score > 0 ">
					and score>#{score}
				</when>
				<otherwise>
					1=2
				</otherwise>
			</choose>
		</where>
	</select>
	
	<select id="selectStusByForeach" resultType="Student">
		<!-- select * from student where id in (1,3,5) -->
		select * from student
		<if test="array.length > 0">
			where id in 
			<!-- 
				collection="array":参数类型是array
				item="myId":元素定义为myId,对比增强for循环的元素
				open="(":以"("开始拼接
				close=")":以"("结尾拼接
				separator=",":拼接内容以","进行分割
				#{myId}:拼接单个元素值
			-->
			<foreach collection="array" item="myId" open="(" close=")" separator=",">
				#{myId}
			</foreach>
		</if>
	</select>
	
	<select id="selectStusByForeach2" resultType="Student">
		<!-- select * from student where id in (1,3,5) -->
		select * from student
		<if test="list.size > 0">
			where id in 
			<!-- 
				collection="array":参数类型是array
				item="myId":元素定义为myId,对比增强for循环的元素
				open="(":以"("开始拼接
				close=")":以"("结尾拼接
				separator=",":拼接内容以","进行分割
				#{myId}:拼接单个元素值
			-->
			<foreach collection="list" item="myId" open="(" close=")" separator=",">
				#{myId}
			</foreach>
		</if>
	</select>
	
	<select id="selectStusByForeach3" resultType="Student">
		<!-- select * from student where id in (1,3,5) -->
		select <include refid="selectColum"></include> from student
		<if test="list.size > 0">
			where id in 
			<!-- 
				collection="array":参数类型是array
				item="myId":元素定义为myId,对比增强for循环的元素
				open="(":以"("开始拼接
				close=")":以"("结尾拼接
				separator=",":拼接内容以","进行分割
				#{myId}:拼接单个元素值
			-->
			<foreach collection="list" item="mystu" open="(" close=")" separator=",">
				#{mystu.id}
			</foreach>
		</if>
	</select>
	
	<!-- sql片段,用于替换重复使用的sql语句-->
	<sql id="selectColum">
		id,name,age,score
	</sql>
	
	
	
	<!-- 
		#{}中可以放什么
		1.参数对象的属性
		2.随意内容,此时的#{}是个占位符
		3.参数为map时的key
		4.参数为map时,若key所对应的value为对象,则可以将该对象的属性放入
		5.参数的索引号
	 -->
	
</mapper>